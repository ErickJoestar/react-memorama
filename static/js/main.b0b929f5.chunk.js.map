{"version":3,"sources":["components/Card/index.js","components/Board/index.js","utilities.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","useState","classFlip","setClassFlip","flipping","setFlipping","Front","Back","id","handleFlip","enableSelect","unflipCard","setTimeout","className","onClick","e","stopPropagation","includes","console","log","CARDS_CONTENT","content","front","back","Board","cardFlipped","setCardFlipped","setEnableSelect","cards","setCards","handleCardFlip","card","undefined","useEffect","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","map","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAyDeA,G,MArDF,SAAAC,GAAU,IAAD,EACcC,mBAAS,IADvB,mBACbC,EADa,KACFC,EADE,OAEYF,oBAAS,GAFrB,mBAEbG,EAFa,KAEHC,EAFG,KAGZC,EAA8CN,EAA9CM,MAAOC,EAAuCP,EAAvCO,KAAMC,EAAiCR,EAAjCQ,GAAIC,EAA6BT,EAA7BS,WAAYC,EAAiBV,EAAjBU,aAY/BC,EAAa,WACjBR,EAAaD,EAAY,iBACzBG,GAAY,GACZO,YAAW,WACTT,EAAa,IACbE,GAAY,KACX,MAcL,OACE,yBAAKQ,UAAU,cACb,yBAAKL,GAAG,OAAOK,UAAS,eAAUX,GAAaY,QAb/B,SAAAC,GAClBA,EAAEC,kBACEN,IAAiBN,IACfF,EAAUe,SAAS,iBACrBN,KArBJR,EAAaD,EAAY,kBACzBU,YAAW,WAETH,EAAW,CAAED,GAAIA,EAAIG,WAAYA,IACjCO,QAAQC,IAAIX,KACX,SA0BC,yBAAKK,UAAU,0BACb,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,aACb,kBAACP,EAAD,QAIJ,yBAAKO,UAAU,wBACb,kBAACN,EAAD,WC3CJa,G,MAAgB,CACpB,CAAEC,QAAS,IAAKb,GAAI,GACpB,CAAEa,QAAS,IAAKb,GAAI,GACpB,CAAEa,QAAS,IAAKb,GAAI,GACpB,CAAEa,QAAS,IAAKb,GAAI,KAEhBc,EAAQ,WACZ,OACE,yBAAKT,UAAU,mBAAf,MAKEU,EAAO,SAAAF,GACX,OAAO,kBACL,yBAAKR,UAAU,kBACZQ,KAwCQG,EArCD,WAAO,IAAD,EACoBvB,mBAAS,IAD7B,mBACXwB,EADW,KACEC,EADF,OAEsBzB,oBAAS,GAF/B,mBAEXS,EAFW,KAEGiB,EAFH,OAGQ1B,mBAAS,IAHjB,mBAGX2B,EAHW,KAGJC,EAHI,KAKZC,EAAiB,SAAAC,QACEC,IAAnBP,EAAYjB,IAEdmB,GAAgB,GAChBf,YAAW,WACTe,GAAgB,KACf,KAECF,EAAYjB,KAAOuB,EAAKvB,KAG1BuB,EAAKpB,aACLc,EAAYd,cAEde,EAAe,KAEfA,EAAeK,IAOnB,OAHAE,qBAAU,WACRJ,ECpDY,SAACK,GAGf,IAFA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAElB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EDqCIQ,CAAQ,GAAD,OAAKtB,EAAkBA,OACtC,IAED,yBAAKP,UAAU,SACZe,EAAMe,KAAI,WAAkBC,GAAO,IAAtBvB,EAAqB,EAArBA,QAASb,EAAY,EAAZA,GACrB,OAAO,kBAAC,EAAD,CAAMF,MAAOgB,EAAOf,KAAMgB,EAAKF,GAAUZ,WAAYqB,EAAgBtB,GAAIA,EAAIE,aAAcA,EAAcmC,IAAKD,S,ME1C9GE,MARf,WACE,OACE,yBAAKjC,UAAU,OACb,kBAAC,EAAD,QCEckC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b0b929f5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport \"./style.css\"\r\n\r\nconst Card = props => {\r\n  const [classFlip, setClassFlip] = useState(\"\");\r\n  const [flipping, setFlipping] = useState(false);\r\n  const { Front, Back, id, handleFlip, enableSelect } = props;\r\n\r\n\r\n  const flipCard = () => {\r\n    setClassFlip(classFlip + \" card--flipped\");\r\n    setTimeout(() => {\r\n      //Here i will handle when te user flips the card. It happend after the effect is over.\r\n      handleFlip({ id: id, unflipCard: unflipCard });\r\n      console.log(id)\r\n    }, 200)\r\n  }\r\n\r\n  const unflipCard = () => {\r\n    setClassFlip(classFlip + \" card--unflip\");\r\n    setFlipping(true);\r\n    setTimeout(() => {\r\n      setClassFlip(\"\");\r\n      setFlipping(false);\r\n    }, 500);\r\n  }\r\n\r\n  const handleClick = e => {\r\n    e.stopPropagation();\r\n    if (enableSelect && !flipping) {\r\n      if (classFlip.includes(\"card--flipped\")) {\r\n        unflipCard();\r\n      } else {\r\n        flipCard();\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card-scene\">\r\n      <div id=\"card\" className={`card ${classFlip}`} onClick={handleClick}>\r\n        <div className=\"card-face card-backing\">\r\n          <div className=\"grain-overlay\"></div>\r\n          <div className=\"back-main\">\r\n            <Front />\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"card-face card-front\">\r\n          <Back />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React, { useState, useEffect } from 'react';\r\nimport Card from '../Card'\r\nimport { shuffle } from '../../utilities';\r\n\r\nimport './style.css'\r\n\r\n\r\nconst CARDS_CONTENT = [\r\n  { content: \"0\", id: 0 },\r\n  { content: \"1\", id: 1 },\r\n  { content: \"2\", id: 2 },\r\n  { content: \"3\", id: 3 }\r\n];\r\nconst front = () => {\r\n  return (\r\n    <div className=\"card-front-view\">\r\n      ?\r\n  </div>)\r\n}\r\n\r\nconst back = content => {\r\n  return () => (\r\n    <div className=\"card-back-view\">\r\n      {content}\r\n    </div>)\r\n}\r\nconst Board = () => {\r\n  const [cardFlipped, setCardFlipped] = useState({});\r\n  const [enableSelect, setEnableSelect] = useState(true);\r\n  const [cards, setCards] = useState([])\r\n\r\n  const handleCardFlip = card => {\r\n    if (cardFlipped.id !== undefined) {\r\n      ///When the user select 2 cards, they must wait to aniation end to select more cards\r\n      setEnableSelect(false);\r\n      setTimeout(() => {\r\n        setEnableSelect(true);\r\n      }, 500);\r\n\r\n      if (cardFlipped.id === card.id) {\r\n        /// Here i will handle when the user selects 2 equal cards\r\n      } else {\r\n        card.unflipCard();\r\n        cardFlipped.unflipCard();\r\n      }\r\n      setCardFlipped({});\r\n    } else {\r\n      setCardFlipped(card);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    setCards(shuffle([...CARDS_CONTENT, ...CARDS_CONTENT]));\r\n  }, [])\r\n  return (\r\n    <div className=\"board\">\r\n      {cards.map(({ content, id }, i) => {\r\n        return <Card Front={front} Back={back(content)} handleFlip={handleCardFlip} id={id} enableSelect={enableSelect} key={i} />\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Board;","const shuffle = (array) => {\r\n  var currentIndex = array.length, temporaryValue, randomIndex;\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex -= 1;\r\n\r\n    // And swap it with the current element.\r\n    temporaryValue = array[currentIndex];\r\n    array[currentIndex] = array[randomIndex];\r\n    array[randomIndex] = temporaryValue;\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nexport { shuffle };","import React from 'react';\r\nimport Board from './components/Board'\r\n\r\n\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Board />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}